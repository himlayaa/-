{"version":3,"sources":["foreach.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/*!\n * Sync/Async forEach\n * https://github.com/cowboy/javascript-sync-async-foreach\n *\n * Copyright (c) 2012 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * http://benalman.com/about/license/\n */\n\n(function(exports) {\n\n  // Iterate synchronously or asynchronously.\n  exports.forEach = function(arr, eachFn, doneFn) {\n    var i = -1;\n    // Resolve array length to a valid (ToUint32) number.\n    var len = arr.length >>> 0;\n\n    // This IIFE is called once now, and then again, by name, for each loop\n    // iteration.\n    (function next(result) {\n      // This flag will be set to true if `this.async` is called inside the\n      // eachFn` callback.\n      var async;\n      // Was false returned from the `eachFn` callback or passed to the\n      // `this.async` done function?\n      var abort = result === false;\n\n      // Increment counter variable and skip any indices that don't exist. This\n      // allows sparse arrays to be iterated.\n      do { ++i; } while (!(i in arr) && i !== len);\n\n      // Exit if result passed to `this.async` done function or returned from\n      // the `eachFn` callback was false, or when done iterating.\n      if (abort || i === len) {\n        // If a `doneFn` callback was specified, invoke that now. Pass in a\n        // boolean value representing \"not aborted\" state along with the array.\n        if (doneFn) {\n          doneFn(!abort, arr);\n        }\n        return;\n      }\n\n      // Invoke the `eachFn` callback, setting `this` inside the callback to a\n      // custom object that contains one method, and passing in the array item,\n      // index, and the array.\n      result = eachFn.call({\n        // If `this.async` is called inside the `eachFn` callback, set the async\n        // flag and return a function that can be used to continue iterating.\n        async: function() {\n          async = true;\n          return next;\n        }\n      }, arr[i], i, arr);\n\n      // If the async flag wasn't set, continue by calling `next` synchronously,\n      // passing in the result of the `eachFn` callback.\n      if (!async) {\n        next(result);\n      }\n    }());\n  };\n\n}(typeof exports === \"object\" && exports || this));"]}